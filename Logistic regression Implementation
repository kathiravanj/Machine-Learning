import pandas
import os
import numpy as np
from sklearn import linear_model

filename = input("Enter the filename of the dataset: ")
targetColumn = input("Enter the column name to be predected: ")

relativePath = os.getcwd()
dataFilePath = relativePath + "/Resources/" + filename + ".csv"
data = pandas.read_csv(dataFilePath)

def Z_ScoreNormalization(data, targetColName):
    for i in data.columns:
        if i == targetColName:
            continue
        mean = data[i].mean()
        std = data[i].std()
        data[i] = data[i].apply(lambda d: float(d - mean) / float(std))

def dataFilter(data, targetColumn):
    columnName = [col for col in data.columns if col not in targetColumn]
    dataFrame = data[columnName]
    labelFrame = data[[targetColumn]]
    size = len(dataFrame)
    trainingData = dataFrame.loc[range(1, int(size / 2))]
    trainingLabel = labelFrame.loc[range(1, int(size / 2))]
    testData = dataFrame.loc[range(int(size / 2), size)]
    testLabel = labelFrame.loc[range(int(size / 2), size)]
    print (trainingData.shape, trainingLabel.shape, testData.shape, testLabel.shape)
    return trainingData, np.asarray(trainingLabel).flatten(), testData, np.asarray(
        testLabel).flatten()


def calBaseLine(data):
    classValues = np.unique(data)
    baseClass = ""
    for label in classValues:
        count = len(data[data == label])
        highest = 0
        if count > highest:
            highest = count
            baseClass = label
        print ("Base Class :", baseClass)
        print ("base Line :", (float(highest) / len(data)) * 100)


def calAccuracy(testLabel, predictLable):
    count = 0
    for i in range(len(testLabel)):
        if testLabel[i] in predictLable[i]:
            count += 1
    print ("Accuracy :", (float(count) / len(testLabel)) * 100)


Z_ScoreNormalization(data, targetColumn)
training, label, test, testLabel = dataFilter(data, targetColumn)
logreg = linear_model.LogisticRegression(C=0.09, n_jobs=-1)

calBaseLine(testLabel)
logreg.fit(training, label)
predictedLabel = logreg.predict(test)
calAccuracy(testLabel, predictedLabel)
